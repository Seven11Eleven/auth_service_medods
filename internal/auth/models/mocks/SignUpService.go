// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/Seven11Eleven/auth_service_medods/internal/auth/models"
	mock "github.com/stretchr/testify/mock"
)

// SignUpService is an autogenerated mock type for the SignUpService type
type SignUpService struct {
	mock.Mock
}

// CheckUsernameExists provides a mock function with given fields: ctx, username
func (_m *SignUpService) CheckUsernameExists(ctx context.Context, username string) (bool, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for CheckUsernameExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAccessToken provides a mock function with given fields: user, expired
func (_m *SignUpService) CreateAccessToken(user *models.User, expired int) (string, error) {
	ret := _m.Called(user, expired)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccessToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.User, int) (string, error)); ok {
		return rf(user, expired)
	}
	if rf, ok := ret.Get(0).(func(*models.User, int) string); ok {
		r0 = rf(user, expired)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*models.User, int) error); ok {
		r1 = rf(user, expired)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRefreshToken provides a mock function with given fields: user, expired
func (_m *SignUpService) CreateRefreshToken(user *models.User, expired int) (string, error) {
	ret := _m.Called(user, expired)

	if len(ret) == 0 {
		panic("no return value specified for CreateRefreshToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.User, int) (string, error)); ok {
		return rf(user, expired)
	}
	if rf, ok := ret.Get(0).(func(*models.User, int) string); ok {
		r0 = rf(user, expired)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*models.User, int) error); ok {
		r1 = rf(user, expired)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterUser provides a mock function with given fields: ctx, user
func (_m *SignUpService) RegisterUser(ctx context.Context, user *models.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSignUpService creates a new instance of SignUpService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSignUpService(t interface {
	mock.TestingT
	Cleanup(func())
}) *SignUpService {
	mock := &SignUpService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
